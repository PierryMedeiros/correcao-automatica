# .github/workflows/correction.yml

name: Correção Automática de Desafio (Multi-gerenciador + IA)

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL para clonagem (ex: https://.../repo.git)'
        required: true

jobs:
  correction-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Configurando ambiente Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 2. Configurando PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 3. Clonando repositório do aluno
        run: git clone ${{ github.event.inputs.repo_url }} .
      
      - name: 4. Instalando dependências (com detecção automática)
        run: |
          if [ -f pnpm-lock.yaml ]; then
            pnpm install
          elif [ -f yarn.lock ]; then
            yarn install
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: 5. Rodando testes unitários
        run: npm test
      
      # --- PASSOS DO GEMINI CORRIGIDOS ---
      
      - name: 6. Análise da Estrutura e Código com Gemini
        id: gemini_analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            // 1. Instala o 'tree' e captura a estrutura de pastas
            // ESTA É A CORREÇÃO: executamos o comando aqui dentro
            try {
              execSync('sudo apt-get update && sudo apt-get install -y tree');
            } catch (e) {
              console.log("Não foi possível instalar o tree, continuando sem ele.");
            }
            const folderStructure = execSync('tree -L 3 || echo "Não foi possível gerar a árvore de diretórios."').toString();
            
            // 2. Encontrar os arquivos relevantes
            let repoPath, interfacePath;
            try {
              repoPath = execSync('find . -type f -name "order.repository.ts"').toString().trim();
              interfacePath = execSync('find . -type f -name "order-repository.interface.ts"').toString().trim();
            } catch (error) {
              core.setFailed('Não foi possível encontrar os arquivos order.repository.ts ou order-repository.interface.ts no projeto.');
              return;
            }

            const repoCode = fs.readFileSync(repoPath, 'utf8');
            const interfaceCode = fs.readFileSync(interfacePath, 'utf8');
            
            // 3. Montar o prompt (o mesmo de antes)
            const prompt = `
              Você é um Sênior Software Engineer especialista em Domain-Driven Design (DDD) e TypeScript, corrigindo o desafio de um aluno.

              **Enunciado do Desafio:** "A classe OrderRepository deve implementar totalmente os métodos definidos pelo OrderRepositoryInterface, e a implementação deve ser coberta por testes."

              **Tarefa:** Analise a estrutura de pastas e o código fornecido. Verifique os dois critérios abaixo e retorne sua análise APENAS no formato JSON.

              **Critérios de Análise:**
              1.  **Estrutura de Pastas DDD:** A estrutura de pastas segue as boas práticas do DDD (ex: separação em camadas como domain, infrastructure, application)?
              2.  **Implementação do Repository:** A classe 'OrderRepository' implementa corretamente a 'OrderRepositoryInterface'? Ela contém a lógica para as quatro operações essenciais (criar, buscar um, buscar todos, atualizar)?

              **Contexto do Projeto do Aluno:**

              **Estrutura de Pastas (até 3 níveis):**
              \`\`\`
              ${folderStructure}
              \`\`\`

              **Arquivo 'order-repository.interface.ts':**
              \`\`\`typescript
              ${interfaceCode}
              \`\`\`

              **Arquivo 'order.repository.ts':**
              \`\`\`typescript
              ${repoCode}
              \`\`\`

              **Formato de Saída (JSON Obrigatório):**
            `;

            // 4. Chamar a API do Gemini (o mesmo de antes)
            const apiKey = '${{ secrets.GOOGLE_API_KEY }}';
            const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=' + apiKey;
            
            const response = await fetch(url, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                contents: [{ parts: [{ text: prompt }] }],
                "generationConfig": { "responseMimeType": "application/json" }
              })
            });

            const data = await response.json();
            if (!response.ok || !data.candidates) {
              core.setFailed('Erro ao chamar a API do Gemini. Resposta: ' + JSON.stringify(data));
              return;
            }
            const jsonText = data.candidates[0].content.parts[0].text;
            core.setOutput('result', jsonText);

      # O resto do arquivo permanece o mesmo
      - name: 7. Resultado Final com Base na IA
        run: |
          RESULTADO_IA='${{ steps.gemini_analysis.outputs.result }}'
          ESTRUTURA_OK=$(echo $RESULTADO_IA | jq '.analysis.ddd_folder_structure.is_correct')
          REPO_OK=$(echo $RESULTADO_IA | jq '.analysis.repository_implementation.is_correct')
          
          if [ "$ESTRUTURA_OK" = "true" ] && [ "$REPO_OK" = "true" ]; then
            echo "STATUS_FINAL=APROVADO" >> $GITHUB_ENV
          else
            echo "STATUS_FINAL=REPROVADO" >> $GITHUB_ENV
          fi

      - name: 8. Exibindo Feedback Final
        run: |
          RESULTADO_IA='${{ steps.gemini_analysis.outputs.result }}'
          FEEDBACK=$(echo $RESULTADO_IA | jq '.feedback_for_student')

          echo "========================================="
          echo "O resultado da correção é: ${{ env.STATUS_FINAL }}"
          echo "========================================="
          echo "Feedback da nossa IA:"
          echo $FEEDBACK

          if [ "${{ env.STATUS_FINAL }}" = "REPROVADO" ]; then
            exit 1
          fi