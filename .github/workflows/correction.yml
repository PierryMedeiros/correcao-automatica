# .github/workflows/correction.yml

name: Correção Automática de Desafio (Versão Multi-gerenciador)

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL para clonagem (ex: https://.../repo.git)'
        required: true

jobs:
  correction-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Configurando ambiente Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # PASSO NOVO: Instala o PNPM para que o robô possa usá-lo se necessário
      - name: 2. Configurando PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8 # Ou a versão que preferir

      - name: 3. Clonando repositório do aluno
        run: git clone ${{ github.event.inputs.repo_url }} .
      
      # PASSO MODIFICADO: Agora ele detecta o gerenciador correto
      - name: 4. Instalando dependências (com detecção automática)
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "Arquivo 'pnpm-lock.yaml' encontrado. Usando pnpm."
            pnpm install
          elif [ -f yarn.lock ]; then
            echo "Arquivo 'yarn.lock' encontrado. Usando yarn."
            yarn install
          elif [ -f package-lock.json ]; then
            echo "Arquivo 'package-lock.json' encontrado. Usando npm."
            # 'npm ci' é mais rápido e seguro para automação que 'npm install'
            npm ci
          else
            echo "Nenhum arquivo de lock encontrado. Usando 'npm install' como padrão."
            npm install
          fi

      - name: 5. Rodando testes unitários
        # Mantemos 'npm test' porque ele lê o script 'test' do package.json,
        # o que funciona para todos os gerenciadores.
        run: npm test
      
      - name: 6. Resultado Final
        run: |
          echo "==================================="
          echo "STATUS: APROVADO"
          echo "Todos os testes passaram com sucesso."
          echo "==================================="