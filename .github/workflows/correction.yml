# .github/workflows/correction.yml

name: Correção Automática de Desafio

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL para clonagem (ex: https://.../repo.git)'
        required: true

jobs:
  correction-pipeline:
    runs-on: ubuntu-latest
    steps:
      # Passos 1 a 8 permanecem os mesmos
      - name: 1. Configurando ambiente Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: 2. Configurando PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: 3. Clonando repositório do aluno
        id: clone_repo
        continue-on-error: true
        run: git clone ${{ github.event.inputs.repo_url }} .
      - name: 4. Feedback para Falha na Clonagem
        if: steps.clone_repo.outcome == 'failure'
        run: |
          echo "STATUS: REPROVADO (Erro no Repositório)"
          echo "Feedback: Olá! Não conseguimos acessar o seu repositório. Verifique se o link está correto e se o repositório está como 'Público' e tente novamente."
          exit 1
      - name: 5. Encontrando o diretório principal do projeto
        if: steps.clone_repo.outcome == 'success'
        id: find_project_dir
        run: |
          PROJECT_PATH=$(dirname $(find . -name "package.json" -print -quit))
          echo "path=$PROJECT_PATH" >> $GITHUB_OUTPUT
      - name: 6. Instalando dependências
        if: steps.clone_repo.outcome == 'success'
        working-directory: ${{ steps.find_project_dir.outputs.path }}
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm install;
          elif [ -f yarn.lock ]; then yarn install;
          elif [ -f package-lock.json ]; then npm ci;
          else npm install; fi
      - name: 7. Rodando testes unitários
        if: steps.clone_repo.outcome == 'success'
        id: run_tests
        working-directory: ${{ steps.find_project_dir.outputs.path }}
        continue-on-error: true
        run: npm test
      - name: 8. Feedback para Testes Falhos
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'failure'
        run: |
          echo "STATUS: REPROVADO (Falha nos Testes)"
          echo "Feedback: Olá! Identificamos que um ou mais testes falharam. Lembre-se que todos os testes devem passar para o desafio ser aprovado. Revise a saída dos testes no log acima e envie novamente."
          exit 1
      
      # --- ABORDAGEM DETERMINÍSTICA E INFALÍVEL ---
      
      - name: 9. Criando arquivo de verificação de interface
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'success'
        uses: actions/github-script@v7
        id: create_test_file
        env:
          PROJECT_PATH: ${{ steps.find_project_dir.outputs.path }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            const projectDir = process.env.PROJECT_PATH;
            process.chdir(projectDir);

            let repoPath, interfacePath;
            try {
              repoPath = execSync('find . -type f -name "*repository.ts" ! -name "*.interface.ts" ! -name "*.spec.ts" ! -name "*.test.ts"').toString().trim().split('\n')[0];
              interfacePath = execSync('find . -type f -name "*repository.interface.ts"').toString().trim().split('\n')[0];
            } catch (error) { core.setFailed('Arquivos de repositório ou interface não encontrados.'); return; }

            // Normaliza os caminhos para importação correta
            const relativeInterfacePath = path.relative(path.dirname(repoPath), interfacePath).replace(/\.ts$/, '');
            
            // Conteúdo do arquivo de teste que força a verificação
            const testFileContent = `
              import { ${path.basename(interfacePath, '.ts')} } from '${relativeInterfacePath}';
              import { ${path.basename(repoPath, '.ts')} } from './${path.basename(repoPath, '.ts')}';
              
              // Se a classe não implementar a interface corretamente, esta linha causará um erro de compilação.
              const _test: ${path.basename(interfacePath, '.ts')} = new ${path.basename(repoPath, '.ts')}({} as any);
              console.log('Verificação de tipo forçada com sucesso.');
            `;
            
            // Cria o arquivo no mesmo diretório da classe do repositório
            const testFilePath = path.join(path.dirname(repoPath), '_fc_correcao_test.ts');
            fs.writeFileSync(testFilePath, testFileContent);
            console.log(`Arquivo de verificação criado em: ${testFilePath}`);
            
      - name: 10. Verificação final com o Compilador TypeScript (TSC)
        if: steps.create_test_file.outcome == 'success'
        id: tsc_check
        working-directory: ${{ steps.find_project_dir.outputs.path }}
        continue-on-error: true
        run: npx tsc --noEmit --skipLibCheck

      - name: 11. Decisão e Feedback Final
        if: steps.create_test_file.outcome == 'success'
        run: |
          if [ "${{ steps.tsc_check.outcome }}" = "success" ]; then
            echo "STATUS=APROVADO"
            echo "FEEDBACK=Parabéns! O projeto foi aprovado. Todos os testes passaram e a classe Repository implementa corretamente a Interface, validado pelo compilador TypeScript."
          else
            echo "STATUS=REPROVADO"
            echo "FEEDBACK=Olá! Seus testes passaram, parabéns! No entanto, a classe Repository não está implementando corretamente todos os métodos da Interface. Revise os erros de compilação no log do passo anterior para ver exatamente quais métodos ou tipos precisam de ajuste."
          fi
          # Este passo não precisa mais do exit 1, ele apenas prepara o feedback.
          
      - name: 12. Exibindo Resultado Final
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'success'
        run: |
          # Este passo foi simplificado e agora é o único ponto de saída
          STATUS='${{ steps.tsc_check.outcome == 'success' && 'APROVADO' || 'REPROVADO' }}'
          FEEDBACK='...' # A mensagem de feedback precisa ser passada do passo 11
          # A lógica ficou complexa, vamos simplificar.