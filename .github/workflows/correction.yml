# .github/workflows/correction.yml

name: Correção Automática de Desafio

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL para clonagem (ex: https://.../repo.git)'
        required: true

jobs:
  correction-pipeline:
    runs-on: ubuntu-latest
    steps:
      # Passos 1 a 8 (preparação e tratamento de erros) permanecem os mesmos
      - name: 1. Configurando ambiente Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: 2. Configurando PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: 3. Clonando repositório do aluno
        id: clone_repo
        continue-on-error: true
        run: git clone ${{ github.event.inputs.repo_url }} .
      - name: 4. Feedback para Falha na Clonagem
        if: steps.clone_repo.outcome == 'failure'
        run: |
          echo "STATUS: REPROVADO (Erro no Repositório)"
          echo "Feedback: Olá! Não conseguimos acessar o seu repositório. Verifique se o link está correto e se o repositório está como 'Público' e tente novamente."
          exit 1
      - name: 5. Encontrando o diretório principal do projeto
        if: steps.clone_repo.outcome == 'success'
        id: find_project_dir
        run: |
          PROJECT_PATH=$(dirname $(find . -name "package.json" -print -quit))
          echo "path=$PROJECT_PATH" >> $GITHUB_OUTPUT
      - name: 6. Instalando dependências
        if: steps.clone_repo.outcome == 'success'
        working-directory: ${{ steps.find_project_dir.outputs.path }}
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm install;
          elif [ -f yarn.lock ]; then yarn install;
          elif [ -f package-lock.json ]; then npm ci;
          else npm install; fi
      - name: 7. Rodando testes unitários
        if: steps.clone_repo.outcome == 'success'
        id: run_tests
        working-directory: ${{ steps.find_project_dir.outputs.path }}
        continue-on-error: true
        run: npm test
      - name: 8. Feedback para Testes Falhos
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'failure'
        run: |
          echo "STATUS: REPROVADO (Falha nos Testes)"
          echo "Feedback: Olá! Identificamos que um ou mais testes falharam. Lembre-se que todos os testes devem passar para o desafio ser aprovado. Revise a saída dos testes no log acima e envie novamente."
          exit 1
      
      # --- PASSO DE ANÁLISE TOTALMENTE REESCRITO ---
      - name: 9. Verificando Métodos do Repositório com IA
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'success'
        id: gemini_analysis_and_process
        uses: actions/github-script@v7
        env:
          PROJECT_PATH: ${{ steps.find_project_dir.outputs.path }}
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            const projectDir = process.env.PROJECT_PATH;
            process.chdir(projectDir);

            let repoPath;
            try {
              repoPath = execSync('find . -type f -name "*repository.ts" ! -name "*.interface.ts" ! -name "*.spec.ts" ! -name "*.test.ts"').toString().trim().split('\n')[0];
            } catch (error) { core.setFailed('Arquivo do repositório não encontrado.'); return; }
            const repoCode = fs.readFileSync(repoPath, 'utf8');
            
            const prompt = `
              Você é um assistente de análise de código focado em encontrar métodos específicos.
              Sua única tarefa é ler o código TypeScript de uma classe e verificar se ela contém métodos que realizam quatro operações específicas, sendo flexível com os nomes.

              **Operações a serem encontradas:**
              - Uma operação para **criar** um novo registro (ex: 'create').
              - Uma operação para **buscar um** registro (ex: 'find', 'findById').
              - Uma operação para **buscar todos** os registros (ex: 'findAll', 'getAll').
              - Uma operação para **atualizar** um registro (ex: 'update').

              Responda APENAS com o seguinte JSON, preenchendo 'true' ou 'false' para cada operação encontrada.

              **Código para Análise:**
              \`\`\`typescript
              ${repoCode}
              \`\`\`

              **Formato de Saída (JSON Obrigatório):**
              {
                "methods_found": {
                  "create": <true_or_false>,
                  "find_one": <true_or_false>,
                  "find_all": <true_or_false>,
                  "update": <true_or_false>
                }
              }
            `;
            
            const apiKey = '${{ secrets.GOOGLE_API_KEY }}';
            const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=' + apiKey;
            
            const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }], "generationConfig": { "responseMimeType": "application/json" } }) });
            const data = await response.json();
            if (!response.ok || !data.candidates) { core.setFailed('Erro ao chamar a API do Gemini: ' + JSON.stringify(data)); return; }
            const jsonText = data.candidates[0].content.parts[0].text;
            const result = JSON.parse(jsonText);

            // --- NOSSO SCRIPT É O JUIZ FINAL ---
            const checks = result.methods_found;
            const allMethodsFound = checks.create && checks.find_one && checks.find_all && checks.update;
            
            let status = 'APROVADO';
            let feedback = 'Parabéns! O projeto foi aprovado. Todos os testes passaram e a análise do código confirmou a presença de todas as operações necessárias no repositório.';

            if (!allMethodsFound) {
              status = 'REPROVADO';
              const missing = [];
              if (!checks.create) missing.push('criar');
              if (!checks.find_one) missing.push('buscar um');
              if (!checks.find_all) missing.push('buscar todos');
              if (!checks.update) missing.push('atualizar');
              feedback = `O projeto foi reprovado. Embora os testes tenham passado, a análise do código indica que seu repositório está incompleto. Faltam métodos para as seguintes operações: **${missing.join(', ')}**. Por favor, adicione a lógica faltante e envie novamente.`;
            }

            core.setOutput('status', status);
            core.setOutput('feedback', feedback);

      - name: 10. Exibindo Feedback Final
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'success'
        env:
          STATUS: ${{ steps.gemini_analysis_and_process.outputs.status }}
          FEEDBACK: ${{ steps.gemini_analysis_and_process.outputs.feedback }}
        run: |
          echo "========================================="
          echo "O resultado da correção é: $STATUS"
          echo "========================================="
          echo "Feedback Final:"
          echo "$FEEDBACK"
          if [ "$STATUS" != "APROVADO" ]; then
            exit 1
          fi