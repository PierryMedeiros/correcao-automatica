# .github/workflows/correction.yml

name: Correção Automática de Desafio

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'URL para clonagem (ex: https://.../repo.git)'
        required: true

jobs:
  correction-pipeline:
    runs-on: ubuntu-latest
    steps:
      # Passos 1 a 8 permanecem exatamente como no seu arquivo funcional
      - name: 1. Configurando ambiente Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: 2. Configurando PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: 3. Clonando repositório do aluno
        id: clone_repo
        continue-on-error: true
        run: git clone ${{ github.event.inputs.repo_url }} .
      - name: 4. Feedback para Falha na Clonagem
        if: steps.clone_repo.outcome == 'failure'
        run: |
          echo "STATUS: REPROVADO (Erro no Repositório)"
          echo "Feedback: Olá! Não conseguimos acessar o seu repositório. Verifique se o link está correto e se o repositório está como 'Público' e tente novamente."
          exit 1
      - name: 5. Encontrando o diretório principal do projeto
        if: steps.clone_repo.outcome == 'success'
        id: find_project_dir
        run: |
          PROJECT_PATH=$(dirname $(find . -name "package.json" -print -quit))
          echo "path=$PROJECT_PATH" >> $GITHUB_OUTPUT
      - name: 6. Instalando dependências
        if: steps.clone_repo.outcome == 'success'
        working-directory: ${{ steps.find_project_dir.outputs.path }}
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm install;
          elif [ -f yarn.lock ]; then yarn install;
          elif [ -f package-lock.json ]; then npm ci;
          else npm install; fi
      - name: 7. Rodando testes unitários
        if: steps.clone_repo.outcome == 'success'
        id: run_tests
        working-directory: ${{ steps.find_project_dir.outputs.path }}
        continue-on-error: true
        run: npm test
      - name: 8. Feedback para Testes Falhos
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'failure'
        run: |
          echo "STATUS: REPROVADO (Falha nos Testes)"
          echo "Feedback: Olá! Identificamos que um ou mais testes falharam. Lembre-se que todos os testes devem passar para o desafio ser aprovado. Revise a saída dos testes no log acima e envie novamente."
          exit 1
      
      # --- NOVA ABORDAGEM HÍBRIDA ---

      - name: 9. Verificação da Declaração 'implements' com IA
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'success'
        id: ai_check
        uses: actions/github-script@v7
        env:
          PROJECT_PATH: ${{ steps.find_project_dir.outputs.path }}
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            const projectDir = process.env.PROJECT_PATH;
            process.chdir(projectDir);

            let repoPath;
            try {
              repoPath = execSync('find . -type f -name "*repository.ts" ! -name "*.interface.ts" ! -name "*.spec.ts" ! -name "*.test.ts"').toString().trim().split('\n')[0];
            } catch (error) { core.setFailed('Arquivo do repositório não encontrado.'); return; }
            const repoCode = fs.readFileSync(repoPath, 'utf8');
            
            const prompt = `
              Você é um analisador de código TypeScript. Sua única tarefa é verificar se a declaração da classe no código fornecido contém a palavra-chave 'implements'.
              Responda APENAS com o seguinte JSON:
              {
                "implements_keyword_found": <true_or_false>
              }
              
              Código para análise:
              \`\`\`typescript
              ${repoCode}
              \`\`\`
            `;
            
            const apiKey = '${{ secrets.GOOGLE_API_KEY }}';
            const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=' + apiKey;
            
            const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }], "generationConfig": { "responseMimeType": "application/json" } }) });
            const data = await response.json();
            if (!response.ok || !data.candidates) { core.setFailed('Erro ao chamar a API do Gemini: ' + JSON.stringify(data)); return; }
            const jsonText = data.candidates[0].content.parts[0].text;
            const result = JSON.parse(jsonText);

            core.setOutput('implements_found', result.implements_keyword_found);

      - name: 10. Verificação da Implementação com TypeScript Compiler (TSC)
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'success'
        id: tsc_check
        working-directory: ${{ steps.find_project_dir.outputs.path }}
        continue-on-error: true
        run: npx tsc --noEmit

      - name: 11. Feedback Final e Decisão
        if: steps.clone_repo.outcome == 'success' && steps.run_tests.outcome == 'success'
        run: |
          IMPLEMENTS_FOUND=${{ steps.ai_check.outputs.implements_found }}
          TSC_OUTCOME=${{ steps.tsc_check.outcome }}

          if [ "$IMPLEMENTS_FOUND" != "true" ]; then
            echo "STATUS: REPROVADO"
            echo "Feedback: A classe do seu repositório não está declarando a implementação da interface com a palavra-chave 'implements'. Este é um requisito fundamental do desafio."
            exit 1
          elif [ "$TSC_OUTCOME" = "failure" ]; then
            echo "STATUS: REPROVADO"
            echo "Feedback: A sua classe declara 'implements', mas a implementação está incompleta ou incorreta. Um ou mais métodos da interface estão faltando ou possuem uma assinatura diferente. Revise os erros do compilador no log do passo anterior."
            exit 1
          else
            echo "STATUS: APROVADO"
            echo "Feedback: Parabéns! O projeto foi aprovado. A classe implementa corretamente a interface e todos os testes passaram com sucesso."
          fi

      - name: 12. Exibindo Resultado Final
        if: always() # Este passo sempre roda para exibir o resultado
        run: echo "Finalizou." # Este passo é opcional, apenas para visualização